; Copyright (c) 2021 Mahyar Koshkouei
;
; SM83/8080 bus communication for the Nintendo Game Boy.

.define DATA_DIR    29
.define PHI         2

; Four state machines are required:
; - One that should have the JUMP PIN set to A15. (SM_A15, gb_bus_read)
; - One that should have the JUMP PIN set to CS. (SM_CS, gb_bus_read)
; - One that should have the JUMP PIN set to RD. (SM_RD, gb_bus_read)
; - One for data output to Game Boy. (SM_DO, gb_bus_write)
;
; Both SM_A15, SM_CS and SM_RD fill the RX FIFO with addresses, data, PHI, WR,
; RD, and CS, all within 30-bits.
;
; If RD is LOW, then the CPU must push the 8-bit data at the requested address
; to the TX FIFO of the SM_DO state machine. The data within the 30-bit RX FIFO
; should not be used.
;
; If RD is HIGH, then the SM_RD state machine will read the address, data, PHI,
; WR, RD, and CS pins when the data from the Game Boy is ready. The TX_FIFO
; buffer of SM_DO *must not* be filled, as the Game Boy is not reading any data,
; and this may affect the next bus command. The address is expected to be the
; same as that read by SM_A15 or SM_CS.
; TODO: Make SM_RD only return data.
;
; The TX_FIFO buffer of SM_DO *must not* be filled when the Game Boy is reading
; or writing to internal memory.
;
; The clock speed of PHI is expected to be a maximum of 2 MHz. The state of the
; bus may change at a maximum rate of 16 MHz. In order to meet the speed
; requirements of the Game Boy, the PIO should run at a clock speed of at least
; 16 MHz.
;
; The direction of the data pins is handled within the gb_bus_write program.

; Read address and RD pin from GB bus.
.program gb_bus_read
gb_bus_read_start:
;	Wait for a new clock cycle, and hence for a new read/write instruction.
	wait 1 GPIO PHI

;   PIN should be set to either A15 or CS.
;	If both A15 and CS pin are HIGH, then the address is not ready. This will
;   loop until the address is ready. It is possible that neither A15 nor CS are
;	pulled LOW in this clock cycle, in which case no read/write operation is
;	performed and the WAIT PHI operation will block until a new clock cycle.
	jmp PIN gb_bus_read_start

;	Read address, data and misc pins into ISR.
;	The CPU can tell whether the read/write operation is ROM or RAM depending
;	on the state machine that this data is being pushed to, with respect to the
;	setting of the JUMP PIN.
;	The misc pins (PHI, RD, CS) are included. The CPU will only need to
;	check RD, which if HIGH, is a write operation to external ROM/RAM.
	in PINS, 30

;	Push address from ISR to RX FIFO
;	This is not required if autopush is enabled
	push noblock

;	Wait for next instruction
    wait 0 GPIO PHI
.wrap

; Read data byte on LOW edge of PHI. Only required when GB is writing to cart.
.program gb_bus_cart_write
gb_bus_cart_write_start:
;	Wait for LOW edge of PHI.
	wait 0 GPIO PHI

;   PIN should be set to RD.
;   If RD is HIGH on the LOW edge of PHI, then the GB is writing to the cart.
	jmp PIN read_data_byte

;   If RD was not HIGH, then go back to start.
	jmp gb_bus_cart_write_start

read_data_byte:
;   Read data byte into ISR. The address will have already been read by the
;   gb_bus_read PIO program.
	in PINS, 8

;	Push address from ISR to RX FIFO
;	This is not required if autopush is enabled
	push noblock

;	Wait for new clock cycle of PHI.
	wait 1 GPIO PHI
.wrap

; Send data to the Game Boy. This is done when the Game Boy is performing a read
; operation of an address.
.program gb_bus_write

; Side-set pin is DATA_DIR
.side_set 1

public gb_bus_write:
;	Pull data from TX FIFO to OSR
;	This is not required if autopull is enabled
	pull ifempty block	side 1

;	Output data from OSR to data pins
	out PINS,8		side 1

;	Set Data pins to OUTPUT.
;	See: https://www.raspberrypi.org/forums/viewtopic.php?t=303335
	mov osr, ~null	side 1	; Set OSR to all ones
    out pindirs, 8	side 0	; Output ones to data pindirs
							; Side: set DATA_DIR to RP2040 -> GB (B -> A)

;	Prepare to set Data pins to INPUT. This is executed later.
	mov osr, null	side 0; Set OSR to all zeros

;	Keep data output active until new clock cycle.
;	TODO: Maybe change this to HIGH EDGE IRQ on PHI?
	wait 0 GPIO PHI	side 0	; Just in case we write really early.
	wait 1 GPIO PHI	side 0

;	Set Data pins to INPUT.
;	This is done as soon as possible to ensure that Data pins are set to INPUT
;	before the gb_bus program reads in all 30 pins.
	out pindirs, 8	side 1	; Output zeros to data pindirs
							; Side: set DATA_DIR to GB -> RP2040 after wait
							;						(A -> B)

;	Wait for next data output
.wrap


% c-sdk {
#include <hardware/clocks.h>
#include <main.h>

void gb_bus_program_init(PIO pio,
		unsigned sm_a15, unsigned sm_cs, unsigned sm_di, unsigned sm_do)
{
	pio_sm_config sm_config_a15, sm_config_cs, sm_config_di, sm_config_do;
	uint gb_bus_read_off, gb_bus_write_off, gb_bus_cart_write_off;
	const float div = 1.0f;

	gb_bus_read_off = pio_add_program(pio, &gb_bus_read_program);
	gb_bus_cart_write_off = pio_add_program(pio, &gb_bus_cart_write_program);
	gb_bus_write_off = pio_add_program(pio, &gb_bus_write_program);

	sm_config_a15 = gb_bus_read_program_get_default_config(gb_bus_read_off);
	sm_config_cs = gb_bus_read_program_get_default_config(gb_bus_read_off);
	sm_config_di = gb_bus_cart_write_program_get_default_config(gb_bus_cart_write_off);
	sm_config_do = gb_bus_write_program_get_default_config(gb_bus_write_off);

	/* Configure SM_A15, and SM_CS. */
	/* Setting the "IN" pins on "gb_bus_read" state machines. */
	sm_config_set_in_pins(&sm_config_a15, PIO_PHI);
	sm_config_set_in_pins(&sm_config_cs,  PIO_PHI);
	sm_config_set_in_pins(&sm_config_di,  PIO_D0);
	/* Configure "OUT" pins to the data bus. */
    sm_config_set_out_pins(&sm_config_do, PIO_D0, NUM_DATA_PINS);

	/* Set number of bits in RX FIFO. */
	/* gb_bus_write does not use a RX FIFO. */
	/* TODO: Enable autopush. */
	sm_config_set_in_shift(&sm_config_a15, false, false, NUM_TOTAL_PINS);
	sm_config_set_in_shift(&sm_config_cs,  false, false, NUM_TOTAL_PINS);
	sm_config_set_in_shift(&sm_config_di,  false, false, NUM_DATA_PINS);
	/* Set number of bits in TX FIFO. */
	/* gb_bus_read does not use a TX FIFO. */
	sm_config_set_out_shift(&sm_config_do, false, false, NUM_DATA_PINS);

	/* Configure "JMP" pins. */
	sm_config_set_jmp_pin(&sm_config_a15, PIO_A15);
	sm_config_set_jmp_pin(&sm_config_cs,  PIO_NCS);
	sm_config_set_jmp_pin(&sm_config_di,  PIO_NRD);

    /* Set clock speed of PIO state machines. */
	sm_config_set_clkdiv(&sm_config_a15, div);
	sm_config_set_clkdiv(&sm_config_cs,  div);
	sm_config_set_clkdiv(&sm_config_do,  div);

	/* Set "sideset" configuration to allow DATA_DIR to be changed on each
	 * instruction for the sm_do state machine. */
	sm_config_set_sideset(&sm_config_do, 1, false, false);
	sm_config_set_sideset_pins(&sm_config_do, PIO_DIR);

	/* Set all initial pindirs as inputs. */
	pio_sm_set_consecutive_pindirs(pio, sm_a15, PIO_PHI, NUM_TOTAL_PINS, false);
	pio_sm_set_consecutive_pindirs(pio, sm_cs,  PIO_PHI, NUM_TOTAL_PINS, false);
	pio_sm_set_consecutive_pindirs(pio, sm_di,  PIO_D0,  NUM_DATA_PINS,  false);
	pio_sm_set_consecutive_pindirs(pio, sm_do,  PIO_D0,  NUM_DATA_PINS,  false);

	/* Allow PIO to set D[0-7] GPIO pins output. */
	for(unsigned pin = PIO_D0; pin <= PIO_D7; pin++)
		pio_gpio_init(pio, pin);

	/* Initialise all state machines. */
	pio_sm_init(pio, sm_a15, gb_bus_read_off,       &sm_config_a15);
	pio_sm_init(pio, sm_cs,  gb_bus_read_off,       &sm_config_cs);
	pio_sm_init(pio, sm_di,  gb_bus_cart_write_off, &sm_config_di);
	pio_sm_init(pio, sm_do,  gb_bus_write_off,      &sm_config_do);
}
%}
