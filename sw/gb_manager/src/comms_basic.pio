; SM83/8080 bus communication for the Nintendo Game Boy.
; Copyright (c) 2021 Mahyar Koshkouei
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted, provided that the above copyright notice and
; this permission notice appear in all copies.
; THIS SOFTWARE IS PROVIDED 'AS-IS', WITHOUT ANY EXPRESS OR IMPLIED WARRANTY.
; IN NO EVENT WILL THE AUTHORS BE HELD LIABLE FOR ANY DAMAGES ARISING FROM
; THE USE OF THIS SOFTWARE.
;

.define PHI		13
.define NWR		14
.define NRD		15
.define NCS		16
.define ADDR1_OE	17
.define ADDR2_OE	18
.define DATA_OE		19
.define DATA_DIR	20
.define M0		21
.define M7		28

.define SIDE_SET_ADDR1_nOE_BIT		0
.define SIDE_SET_ADDR2_nOE_BIT		1
.define SIDE_SET_DATA_nOE_BIT		2
.define SIDE_SET_DATA_DIR_BIT		3
.define SIDE_SET_MULTIPLEXOR_LOWADDR	0b1110
.define SIDE_SET_MULTIPLEXOR_HIGHADDR	0b1101
; Set multiplexor to write data from the RP2040 to the Game Boy.
.define SIDE_SET_MULTIPLEXOR_RP2040OUT	0b1011
; Set multiplexor to read data from the Game Boy to the RP2040.
.define SIDE_SET_MULTIPLEXOR_RP2040IN	0b0011

.define IRQ_CONTROL_MULTIPLEXOR		4

; Reads address from the Game Boy.
.program get_address_gb_bus

; JMP pin must be set to either A15 (M7) or NCS.

get_address_gb_bus:
	; Do not set the multiplexor if it being used by another state machine.
	wait 0 irq IRQ_CONTROL_MULTIPLEXOR
.wrap_target
	; Make sure that the multplexor is set to the HIGH address byte.
	set pins, SIDE_SET_MULTIPLEXOR_HIGHADDR				[2]
	; Check A15 or nCS. If HIGH, address isn't ready so loop.
	jmp pin get_address_gb_bus
	; Take control of multiplexor.
	irq set IRQ_CONTROL_MULTIPLEXOR

	; Read in the address.
	; Read HIGH byte of address into ISR.
	; INFO: A byte swap will be required by the CPU.
	in pins, 8
	; Read LOW byte of address into ISR.
	; Side: set multiplexor to LOW byte of address.
	set pins, SIDE_SET_MULTIPLEXOR_LOWADDR				[2]
	in pins, 8

	; Allow other state machines to check for addresses.
	irq clear IRQ_CONTROL_MULTIPLEXOR

	; Wait until new clock cycle.
	wait 0 GPIO PHI
	wait 1 GPIO PHI
.wrap

; End .program get_address_gb_bus

; Write data to the Game Boy.
.program write_data_gb_bus
write_data_gb_bus:
.wrap_target
	; Wait until we have data to write to the Game Boy.
	pull ifempty block
	; Wait for any other state machine to finish controlling the
	; multiplexor. FIXME: We should never have to wait here.
	wait 0 irq IRQ_CONTROL_MULTIPLEXOR
	; Take control of the multiplexor.
	irq set IRQ_CONTROL_MULTIPLEXOR

	; Set the multiplexor to output to the data bus.
	set pins, SIDE_SET_MULTIPLEXOR_RP2040OUT

	; Put date byte to the multiplexor. This must be done before multiplexor
	; pin directions are changed, becuase that disrupts the OSR.
	out PINS, 8

	; Set multiplexor pin directions to output.
	mov osr, ~null
	out pindirs, 8

	; Prepare OSR for pin direction setting later.
	mov osr, null

	; Hold data until the end of clock cycle.
	wait 0 GPIO PHI
	wait 1 GPIO PHI

	; Set multiplexor pin directions to input (the default state).
	out pindirs, 8
	; Allow other state machines to take control of the multiplexor.
	irq clear IRQ_CONTROL_MULTIPLEXOR
.wrap
; End .program write_data_gb_bus

; Read data from the Game Boy when it wants to write to the cartridge.
.program read_data_gb_bus

read_data_gb_bus:
.wrap_target
	; Wait for data to become ready.
	wait 0 GPIO NWR

	; Wait for any other state machine to finish controlling the
	; multiplexor. FIXME: We should never have to wait here.
	wait 0 irq IRQ_CONTROL_MULTIPLEXOR
	; Take control of the multiplexor.
	irq set IRQ_CONTROL_MULTIPLEXOR

	; Set the multiplexor to read from the data bus.
	set pins, SIDE_SET_MULTIPLEXOR_RP2040IN				[2]
	; Read in data.
	in pins, 8

	; Wait for the Game Boy to end its write request. Not required, but
	; stops the other state machines from checking pins.
	wait 1 GPIO NWR

	; Allow other state machines to take control of the multiplexor.
	irq clear IRQ_CONTROL_MULTIPLEXOR
.wrap
; End .program write_data_gb_bus

% c-sdk {

#define SIDE_SET_INIT 0b1101

/**
 * Initiliase Game Boy bus communication with PIO.
 */
void gb_bus_program_basic_init(PIO pio, unsigned sm_a15, unsigned sm_wd)
{
	pio_sm_config sm_config_a15, sm_config_wd;
	uint get_address_gb_bus_off, write_data_gb_bus_off;

	get_address_gb_bus_off = pio_add_program(pio, &get_address_gb_bus_program);
	write_data_gb_bus_off = pio_add_program(pio, &write_data_gb_bus_program);
	sm_config_a15 = get_address_gb_bus_program_get_default_config(get_address_gb_bus_off);
	sm_config_wd = write_data_gb_bus_program_get_default_config(write_data_gb_bus_off);

	/* Configure IN pins. */
	sm_config_set_in_pins(&sm_config_a15, PIO_M0);
	sm_config_set_in_pins(&sm_config_wd,  PIO_M0);
	/* Configure OUT pins. */
	sm_config_set_out_pins(&sm_config_a15, PIO_M0, 8);
	sm_config_set_out_pins(&sm_config_wd,  PIO_M0, 8);

	/* Configure JMP pins. */
	sm_config_set_jmp_pin(&sm_config_a15, PIO_M7);

	/* Set number of bits in RX FIFO. */
	sm_config_set_in_shift(&sm_config_a15, true, true, 16);
	/* Set number of bits in TX FIFO. */
	sm_config_set_out_shift(&sm_config_a15, true, false, 8);
	sm_config_set_out_shift(&sm_config_wd,  true, false, 8);

	/* Set clock speed of PIO state machines. */
	sm_config_set_clkdiv_int_frac(&sm_config_a15, 2, 0);
	sm_config_set_clkdiv_int_frac(&sm_config_wd,  2, 0);

	/* Set initial pin directions for all state machines. */
	pio_sm_set_consecutive_pindirs(pio, sm_a15, PIO_PHI, 4, false);
	pio_sm_set_consecutive_pindirs(pio, sm_a15, PIO_ADDR1_OE, 4, true);
	pio_sm_set_consecutive_pindirs(pio, sm_a15, PIO_M0, 8, false);
	pio_sm_set_consecutive_pindirs(pio, sm_wd, PIO_PHI, 4, false);
	pio_sm_set_consecutive_pindirs(pio, sm_wd, PIO_ADDR1_OE, 4, true);
	pio_sm_set_consecutive_pindirs(pio, sm_wd, PIO_M0, 8, false);

	/* Initialise GB Bus Pins */
	for(uint_fast8_t pin = PIO_PHI; pin <= PIO_M7; pin++)
	{
		/* Disable schmitt triggers on GB Bus. The bus transceivers
		 * already have schmitt triggers. */
		gpio_set_input_hysteresis_enabled(pin, false);
		/* Use fast slew rate for GB Bus. */
		gpio_set_slew_rate(pin, GPIO_SLEW_RATE_FAST);
		/* Initialise PIO0 pins. */
		pio_gpio_init(pio, pin);
	}

	/* Set "sideset" configuration to allow OE and DATA_DIR to be changed
	 on each instruction for the state machines. */
	//sm_config_set_sideset(&sm_config_a15, 4, false, false);
	//sm_config_set_sideset_pins(&sm_config_a15, PIO_ADDR1_OE);
	//pio_sm_exec(pio, sm_a15, pio_encode_nop() |
	//	pio_encode_sideset(4, SIDE_SET_INIT));

	/* Use SET to set the multiplexor state. */
	sm_config_set_set_pins(&sm_config_a15, PIO_ADDR1_OE, 4);
	sm_config_set_set_pins(&sm_config_wd,  PIO_ADDR1_OE, 4);

	/* Initialise all state machines. */
	pio_sm_init(pio, sm_a15, get_address_gb_bus_off, &sm_config_a15);
	pio_sm_init(pio, sm_wd, write_data_gb_bus_off, &sm_config_wd);
}
%}
