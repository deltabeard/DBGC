; SM83/8080 bus communication for the Nintendo Game Boy.
; Copyright (c) 2021 Mahyar Koshkouei
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted, provided that the above copyright notice and
; this permission notice appear in all copies.
; THIS SOFTWARE IS PROVIDED 'AS-IS', WITHOUT ANY EXPRESS OR IMPLIED WARRANTY.
; IN NO EVENT WILL THE AUTHORS BE HELD LIABLE FOR ANY DAMAGES ARISING FROM
; THE USE OF THIS SOFTWARE.
;

.define PHI		13
.define NWR		14
.define NRD		15
.define NCS		16
.define ADDR1_OE	17
.define ADDR2_OE	18
.define DATA_OE		19
.define DATA_DIR	20
.define M0		21
.define M7		28

.define SIDE_SET_MULTIPLEXOR_LOWADDR	0b0110
.define SIDE_SET_MULTIPLEXOR_HIGHADDR	0b1010
; Set multiplexor to write data from the RP2040 to the Game Boy.
.define SIDE_SET_MULTIPLEXOR_DATAIN	0b1101
; Set multiplexor to read data from the Game Boy to the RP2040.
.define SIDE_SET_MULTIPLEXOR_DATAOUT	0b1100

; Synchronise the input state machines so that reading the address for A15
; and CS reads happen without clashing with each other. Also handles Game Boy
; writing data to the bus.
.program sync_gb_bus

; JMP pin must be set to NRD.
; Side-set pins are PIO_ADDR1_OE, PIO_ADDR2_OE, PIO_DATA_OE, and PIO_DATA_DIR.
.side_set 4 opt

sync_gb_bus_start:
.wrap_target
	; Wait for new clock cycle of PHI.
	wait 1 GPIO PHI
	; Set IRQ 0 on the HIGH edge of PHI. This triggers the other state
	; machines to start checking for A15 and CS.
	irq set 0
	; Wait for LOW edge of PHI.
	wait 0 GPIO PHI
	; Check whether the Game Boy is attempting to write to the cart. If
	; NRD pin is HIGH, then a cart write is expected to take place.
	jmp pin write_cart
	; Loop to beginning.
	.wrap

	; The CPU can anticipate that data will be written to cart by checking
	; the NRD pin being HIGH when an address is read by a state machine.
write_cart:
	; Set Data pins to INPUT. Set OSR to all zeros.
	; See: https://www.raspberrypi.org/forums/viewtopic.php?t=303335
	; Side: Set multiplexor to the data pins and set data direction from
	; Game Boy to the RP2040.
	mov osr, null		side SIDE_SET_MULTIPLEXOR_DATAOUT
	; Output zeros to multiplexor pindirs.
	; Side: Hold previous state.
	out pindirs, 8		side SIDE_SET_MULTIPLEXOR_DATAOUT
	; Wait for data to become ready.
	; Side: Hold previous state.
	wait 0 GPIO NWR		side SIDE_SET_MULTIPLEXOR_DATAOUT
	; Read Data byte. Address should have already been read by another
	; state machine.
	; Side: Hold previous state.
        in PINS, 8		side SIDE_SET_MULTIPLEXOR_DATAOUT
        ; Wait for data write mode to complete.
        ; Side: Hold previous state.
        wait 1 GPIO NWR		side SIDE_SET_MULTIPLEXOR_DATAOUT
        ; Set Data pins to OUTPUT. Set OSR to all ones.
        ; See: https://www.raspberrypi.org/forums/viewtopic.php?t=303335
        ; Side: Set multiplexor to the HIGH address pins and set data direction
        ; from RP2040 to the Game Boy (default state).
        mov osr, ~null		side SIDE_SET_MULTIPLEXOR_HIGHADDR
        ; Output ones to multiplexor pindirs.
        out pindirs, 8
	; Loop to beginning.
	jmp sync_gb_bus_start

;End .program sync_gb_bus

; Sends data to the Game Boy.
.program read_data_gb_bus

; Side-set pins are PIO_ADDR1_OE, PIO_ADDR2_OE, PIO_DATA_OE, and PIO_DATA_DIR.
.side_set 4 opt

read_data_gb_bus_start:
.wrap_target
	; Pull data from TX FIFO to OSR
	pull ifempty block
	; Output data from OSR to data pins.
	; Side: set multiplexor to data pins and set direction from RP2040 to
	; Game Boy.
	out pins, 8		side SIDE_SET_MULTIPLEXOR_DATAIN
	; Wait for new clock cycle of PHI. It is expected that the state
	; machine reading the address clears the IRQ before this line is
	; reached.
	; Side: Hold previous state.
	wait 1 irq 0		side SIDE_SET_MULTIPLEXOR_DATAIN
.wrap

; End .program read_data_gb_bus

; Reads address from the Game Boy.
.program read_address_gb_bus

; JMP pin must be set to either A15 (M7) or NCS.
; Side-set pins are PIO_ADDR1_OE, PIO_ADDR2_OE, PIO_DATA_OE, and PIO_DATA_DIR.
.side_set 4 opt

read_address_gb_bus:
.wrap_target
	; Wait for new clock cycle of PHI.
	wait 1 irq 0
	; If A15 or NCS is LOW, then the Game Boy is sending the cart an
	; address. The CPU must decide whether this address is within range
	; or not.
	; If HIGH, then keep checking until a state machine clears the
	; interrupt.
	; Side: set multiplexor to HIGH byte of address for A15 checking.
	jmp pin read_address_gb_bus side SIDE_SET_MULTIPLEXOR_HIGHADDR
	; If we get here, then the address is ready to the read.
	; Read LOW byte of address into ISR.
	; Side: set multiplexor to LOW byte of address.
        in PINS, 8		side SIDE_SET_MULTIPLEXOR_LOWADDR
        ; Read HIGH byte of address into ISR.
        ; Side: set multiplexor to HIGH byte of address.
        in PINS, 8		side SIDE_SET_MULTIPLEXOR_HIGHADDR
.wrap

; End .program read_address_gb_bus


% c-sdk {

/**
 * Check if a cart write is being requested by the Game Boy.
 */
static inline bool gb_bus_is_cart_write(void)
{
	return gpio_get(PIO_NRD);
}

/**
 * Initiliase Game Boy bus communication with PIO.
 */
void gb_bus_program_init(PIO pio,
	unsigned sm_a15, unsigned sm_ncs, unsigned sm_do, unsigned sm_di)
{
	pio_sm_config sm_config_a15, sm_config_ncs, sm_config_do, sm_config_di;
	uint sync_gb_bus_off, read_data_gb_bus_off, read_address_gb_bus_off;

	sync_gb_bus_off = pio_add_program(pio, &sync_gb_bus_program);
	read_data_gb_bus_off = pio_add_program(pio, &read_data_gb_bus_program);
	read_address_gb_bus_off = pio_add_program(pio, &read_address_gb_bus_program);

	sm_config_di = sync_gb_bus_program_get_default_config(sync_gb_bus_off);
	sm_config_do = read_data_gb_bus_program_get_default_config(read_data_gb_bus_off);
	sm_config_a15 = read_address_gb_bus_program_get_default_config(read_address_gb_bus_off);
	sm_config_ncs = read_address_gb_bus_program_get_default_config(read_address_gb_bus_off);

	/* Configure SM_A15, and SM_CS. */
	/* Setting the "IN" pins on "gb_bus_get_address" state machines. */
	/* Set the first "IN" pin on the state machines to the first address pin. */
	sm_config_set_in_pins(&sm_config_a15, PIO_M0);
	sm_config_set_in_pins(&sm_config_ncs, PIO_M0);
	sm_config_set_in_pins(&sm_config_di, PIO_M0);
	/* Configure "OUT" pins to the data bus. */
	sm_config_set_out_pins(&sm_config_do, PIO_M0, NUM_MULTIPLEX_PINS);

	/* Configure "JMP" pins. */
	/* If RD is HIGH, then this JMP instruction will allow the state machine to
	 * additionally read the data from the Game Boy. */
	sm_config_set_jmp_pin(&sm_config_a15, PIO_M7);
	sm_config_set_jmp_pin(&sm_config_ncs, PIO_NCS);
	sm_config_set_jmp_pin(&sm_config_di, PIO_NRD);

	/* Set number of bits in RX FIFO. */
	/* TODO: This may only be required for autopush functionality. */
	sm_config_set_in_shift(&sm_config_a15, true, true, 16);
	sm_config_set_in_shift(&sm_config_ncs, true, true, 16);
	sm_config_set_in_shift(&sm_config_di,  true, true,  8);
	/* Set number of bits in TX FIFO. */
	sm_config_set_out_shift(&sm_config_do, true, false, NUM_MULTIPLEX_PINS);

	/* Set clock speed of PIO state machines. */
	sm_config_set_clkdiv_int_frac(&sm_config_a15, 1, 0);
	sm_config_set_clkdiv_int_frac(&sm_config_ncs, 1, 0);
	sm_config_set_clkdiv_int_frac(&sm_config_do,  1, 0);
	sm_config_set_clkdiv_int_frac(&sm_config_di,  1, 0);

	/* Set initial pin directions for all state machines. */
	for(uint sm = 0; sm < 4; sm++)
	{
		pio_sm_set_consecutive_pindirs(pio, sm, PIO_PHI, 4, false);
		pio_sm_set_consecutive_pindirs(pio, sm, PIO_ADDR1_OE, 4, true);
		pio_sm_set_consecutive_pindirs(pio, sm, PIO_M0, 8, false);
	}

	/* Allow PIO to set OE and Multiplexed GPIO pins as output. */
	for(unsigned pin = PIO_ADDR1_OE; pin <= PIO_M7; pin++)
		pio_gpio_init(pio, pin);

	/* Set "sideset" configuration to allow OE and DATA_DIR to be changed
	 on each instruction for the state machines. */
	sm_config_set_sideset(&sm_config_a15, 4, true, false);
	sm_config_set_sideset(&sm_config_ncs, 4, true, false);
	sm_config_set_sideset(&sm_config_do, 4, true, false);
	sm_config_set_sideset(&sm_config_di, 4, true, false);
	sm_config_set_sideset_pins(&sm_config_a15, PIO_ADDR1_OE);
	sm_config_set_sideset_pins(&sm_config_ncs, PIO_ADDR1_OE);
	sm_config_set_sideset_pins(&sm_config_do, PIO_ADDR1_OE);
	sm_config_set_sideset_pins(&sm_config_di, PIO_ADDR1_OE);

	/* Initialise all state machines. */
	pio_sm_init(pio, sm_a15, read_address_gb_bus_off, &sm_config_a15);
	pio_sm_init(pio, sm_ncs, read_address_gb_bus_off, &sm_config_ncs);
	pio_sm_init(pio, sm_do,  read_data_gb_bus_off, &sm_config_do);
	pio_sm_init(pio, sm_di,  sync_gb_bus_off, &sm_config_di);
}
%}
